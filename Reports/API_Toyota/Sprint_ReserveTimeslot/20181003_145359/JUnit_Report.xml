<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Sprint_ReserveTimeslot" time="4" tests="1" failures="0" errors="0">
   <testsuite name="Sprint_ReserveTimeslot" tests="1" failures="0" errors="0" time="4" timestamp="2018-10-03 14:54:00" hostname="vinh.le - TITAN-V-2001.titandms.local" id="Test Suites/API_Toyota/Sprint_ReserveTimeslot">
      <properties>
         <property name="deviceName" value=""/>
         <property name="devicePlatform" value=""/>
         <property name="logFolder" value="C:\\Users\\vinh.le\\git\\TitanAPIKatalon\\Reports\\API_Toyota\\Sprint_ReserveTimeslot\\20181003_145359"/>
         <property name="logFiles" value="C:\\Users\\vinh.le\\git\\TitanAPIKatalon\\Reports\\API_Toyota\\Sprint_ReserveTimeslot\\20181003_145359\\execution0.log"/>
         <property name="attachments" value=""/>
         <property name="hostName" value="vinh.le - TITAN-V-2001.titandms.local"/>
         <property name="hostAddress" value="192.168.3.19"/>
         <property name="os" value="Windows 10 64bit"/>
         <property name="katalonVersion" value="5.7.1.1"/>
      </properties>
      <testcase name="Test Cases/TOYOTA/Main_Toyota_TestCase - AllSprints" classname="Test Cases/TOYOTA/Main_Toyota_TestCase - AllSprints" status="PASSED">
         <system-out><![CDATA[2018-10-03 14:54:00 - [TEST_CASE][PASSED] - Test Cases/TOYOTA/Main_Toyota_TestCase - AllSprints: Test Cases/TOYOTA/Main_Toyota_TestCase - AllSprints

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - callTestCase: Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Setup_Method_And_Variables - V1' successfully

2018-10-03 14:54:01 - [TEST_CASE][PASSED] - Test Cases/TOYOTA/Library_TestCase/Setup_Method_And_Variables - V1: Test Cases/TOYOTA/Library_TestCase/Setup_Method_And_Variables - V1

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_Interval == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_WorkshopStart == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_WorkshopEnd == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_Dealer_Code == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_Location_Code == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_VIN == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_REGNumber == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_FirstName == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_LastName == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_TotalPrice == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_TotalDuration == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_StartDropDate == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_EndDropDate == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_StartSearchDate == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_EndSearchDate == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_Duration == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_ServiceDate == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_StartDropDate == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_EndDropDate == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_StartSearchDate == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_EndSearchDate == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_BookingId == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_ServiceType == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_DropOffTime == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (!(Setup_PickUpTime == "")): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - SetDate = { java.util.Date current_time, int number_month, int number_day, int number_hour, java.lang.String format_date -> ... }: null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - RandomNumber = { int number -> ... }: null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - today = new java.util.Date(): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - current_date = today.format("YYYY-MM-dd"): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - Glb_Current_Date = current_date: null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - Glb_Current_Hour = SetDate.call(today, 0, 0, 3, "HH:mm"): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (Glb_ServiceDate.toString().toLowerCase() == "cr"): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (Glb_StartDate.toString().toLowerCase() == "cr"): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (Glb_EndDate.toString().toLowerCase() == "cr"): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (Glb_StartSearchDate.toString().toLowerCase() == "cr"): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (Glb_EndSearchDate.toString().toLowerCase() == "cr"): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - Glb_ContactId = "1901" + RandomNumber.call(999999): null

2018-10-03 14:54:01 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Setup_Method_And_Variables - V1' successfully

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (var_Status_OpCode == "true"): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (var_Status_GetOffTime == "true"): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (var_Status_PickupTime == "true"): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - If (var_Status_ReservedTimeslot == "true"): Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_ReserveTimeslots_JSON - V1' successfully

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - callTestCase: Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_ReserveTimeslots_JSON - V1' successfully

2018-10-03 14:54:01 - [TEST_CASE][PASSED] - Test Cases/TOYOTA/Library_TestCase/Toyota_ReserveTimeslots_JSON - V1: Test Cases/TOYOTA/Library_TestCase/Toyota_ReserveTimeslots_JSON - V1

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - ConvertString_toDate = { java.lang.String Date_Str, java.lang.String format -> ... }: null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - ConvertObjectToDate = { java.lang.Object global -> ... }: null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - ReserveTimeslot = com.kms.katalon.core.testobject.ObjectRepository.findTestObject(Toyota/ReserveTimeslots_JSON, [Service_Date:internal.GlobalVariable.Glb_ServiceDate, Duration:internal.GlobalVariable.Glb_Duration_Time, Drop_Off_Time:internal.GlobalVariable.Glb_DropOffTime, ... ]): Finding Test Object with id 'Object Repository/Toyota/ReserveTimeslots_JSON'

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - ReserveTimeslot.getHttpHeaderProperties().add(new com.kms.katalon.core.testobject.TestObjectProperty(Authorization, com.kms.katalon.core.testobject.ConditionType.EQUALS, (Basic  + internal.GlobalVariable.Glb_Authorization_Token))): null

2018-10-03 14:54:01 - [TEST_STEP][PASSED] - Statement - res_ReserveTimeslot = com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords.sendRequest(ReserveTimeslot): Send request successfully

2018-10-03 14:54:02 - [MESSAGE][PASSED] - Send request successfully

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Duration = Glb_Duration_Time: null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Service_Date = java.util.Date.parse("yyyy-MM-dd", Glb_ServiceDate): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - println(Glb_ServiceDate): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - println(Service_Date): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - current = java.util.Date.parse("yyyy-MM-dd", Glb_Current_Date): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - current_hour = ConvertObjectToDate.call(Glb_Current_Hour): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - DropOffTime = ConvertObjectToDate.call(Glb_DropOffTime): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - PickUpTime = ConvertObjectToDate.call(Glb_PickUpTime): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Start_WS_Hr_Obj = "0" + Glb_WorkshopStart + ":00": null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Start_WS_Hr = ConvertObjectToDate.call(Start_WS_Hr_Obj): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - End_WS_Hr_Obj = Glb_WorkshopEnd + ":00": null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - End_WS_Hr = ConvertObjectToDate.call(End_WS_Hr_Obj): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - duration_hours = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression>: null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - If (!(Glb_Dealer_Code == "765A")): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Else If (Duration <= 0): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Else If (!(Glb_ServiceBay_Type == "PERIODIC" || Glb_ServiceBay_Type == "EXPRESS" || Glb_ServiceBay_Type == "REPAIR" || Glb_ServiceBay_Type == "DIAGNOSTIC")): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Else If (Glb_Location_Code == "2" || Glb_Location_Code == "3" || Glb_Location_Code == "5"): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Else If (!(Glb_Location_Code == "1" || Glb_Location_Code == "4" || Glb_Location_Code == "360")): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Else If (Service_Date.before(current)): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Else If (Duration >= 10): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Else If (Service_Date.format("E") == "Sat" || Service_Date.format("E") == "Sun"): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Else If (DropOffTime.before(Start_WS_Hr) || DropOffTime.after(End_WS_Hr) || duration_hours < Duration): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - VerifyResponse(res_ReserveTimeslot, 200, ""): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - verifyResponseStatusCode: Verify response status code successfully

2018-10-03 14:54:02 - [MESSAGE][PASSED] - Verify response status code successfully

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - res_Text = new groovy.json.JsonSlurper().parseText(response.getResponseText()): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - If (!(ExpectedMessage == "")): Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3' successfully

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - verifyElementPropertyValue: Verify element property value successfully

2018-10-03 14:54:02 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - verifyElementPropertyValue: Verify element property value successfully

2018-10-03 14:54:02 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - res_Text = new groovy.json.JsonSlurper().parseText(res_ReserveTimeslot.getResponseText()): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Glb_Reserve_Token = XReserveToken: null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - println(Glb_Reserve_Token): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - callTestCase: Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3' successfully

2018-10-03 14:54:02 - [TEST_CASE][PASSED] - Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3: Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - current_hour = java.util.Date.parse("HH:mm", Glb_Current_Hour): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - current = java.util.Date.parse("yyyy-MM-dd", Glb_Current_Date): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Start_Date_Str = java.util.Date.parse("yyyy-MM-dd", Glb_StartDate): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Start_Date = Start_Date_Str.format("yyyy-MM-dd"): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - End_Date_Str = java.util.Date.parse("yyyy-MM-dd", Glb_EndDate): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Start = Glb_WorkshopStart: null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - End = Glb_WorkshopEnd: null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Interval = Glb_Interval: null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - Duration = Glb_Duration_Time: null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - GetServiceOperation = com.kms.katalon.core.testobject.ObjectRepository.findTestObject(Toyota/GetDropOffTimes_JSON, [Start_Date:internal.GlobalVariable.Glb_StartDate, End_Date:internal.GlobalVariable.Glb_EndDate, ServiceBay_Type:internal.GlobalVariable.Glb_ServiceBay_Type, ... ]): Finding Test Object with id 'Object Repository/Toyota/GetDropOffTimes_JSON'

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - GetServiceOperation.getHttpHeaderProperties().add(new com.kms.katalon.core.testobject.TestObjectProperty(Authorization, com.kms.katalon.core.testobject.ConditionType.EQUALS, (Basic  + internal.GlobalVariable.Glb_Authorization_Token))): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - res_GetServiceOperation = com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords.sendRequest(GetServiceOperation): Send request successfully

2018-10-03 14:54:02 - [MESSAGE][PASSED] - Send request successfully

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - If (!(Glb_Dealer_Code == "765A")): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - verifyResponseStatusCode: Verify response status code successfully

2018-10-03 14:54:02 - [MESSAGE][PASSED] - Verify response status code successfully

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - res_Text = new groovy.json.JsonSlurper().parseText(response.getResponseText()): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - If (!(ExpectedMessage == "")): null

2018-10-03 14:54:02 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3' successfully

2018-10-03 14:54:02 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_ReserveTimeslots_JSON - V1' successfully

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - If (var_Status_GetTransport == "true"): null

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - Statement - If (var_Status_MakeBooking == "true"): Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_MakeServiceBooking_JSON - V1' successfully

2018-10-03 14:54:02 - [TEST_STEP][PASSED] - callTestCase: Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_MakeServiceBooking_JSON - V1' successfully

2018-10-03 14:54:03 - [TEST_CASE][PASSED] - Test Cases/TOYOTA/Library_TestCase/Toyota_MakeServiceBooking_JSON - V1: Test Cases/TOYOTA/Library_TestCase/Toyota_MakeServiceBooking_JSON - V1

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - ConvertString_toDate = { java.lang.String Date_Str, java.lang.String format -> ... }: null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - ConvertObjectToDate = { java.lang.Object global -> ... }: null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - DMSOperationCode = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression>: null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - If (Glb_ServiceType == "OSB_SERVICE_TYPE_LOGBOOK"): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - DMSOperationCode = "OSB_SERVICE_TYPE_ADDITIONAL": null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - MakeServiceBooking = com.kms.katalon.core.testobject.ObjectRepository.findTestObject(Toyota/MakeServiceBooking_JSON, [VIN:internal.GlobalVariable.Glb_VIN, REGNumber:internal.GlobalVariable.Glb_REGNumber, Service_Date:internal.GlobalVariable.Glb_ServiceDate, ... ]): Finding Test Object with id 'Object Repository/Toyota/MakeServiceBooking_JSON'

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - MakeServiceBooking.getHttpHeaderProperties().add(new com.kms.katalon.core.testobject.TestObjectProperty(Authorization, com.kms.katalon.core.testobject.ConditionType.EQUALS, (Basic  + internal.GlobalVariable.Glb_Authorization_Token))): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - res_MakeServiceBooking = com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords.sendRequest(MakeServiceBooking): Send request successfully

2018-10-03 14:54:03 - [MESSAGE][PASSED] - Send request successfully

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - TotalDuration = Glb_TotalDuration: null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Service_Date = java.util.Date.parse("yyyy-MM-dd", Glb_ServiceDate): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - current = java.util.Date.parse("yyyy-MM-dd", Glb_Current_Date): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - DropOffTime = ConvertObjectToDate.call(Glb_DropOffTime): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - PickUpTime = ConvertObjectToDate.call(Glb_PickUpTime): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Start_WS_Hr_Obj = "0" + Glb_WorkshopStart + ":00": null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Start_WS_Hr = ConvertObjectToDate.call(Start_WS_Hr_Obj): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - End_WS_Hr_Obj = Glb_WorkshopEnd + ":00": null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - End_WS_Hr = ConvertObjectToDate.call(End_WS_Hr_Obj): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - duration_hours = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression>: null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - println(Glb_BookingStatus): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - If (!(Glb_Dealer_Code == "765A")): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Else If (DropOffTime.after(PickUpTime)): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Else If (!(Glb_TotalDuration == "1")): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Else If (!(Glb_TotalPrice == "110")): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Else If (duration_hours < TotalDuration): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Else If (Glb_Location_Code == "2" || Glb_Location_Code == "3" || Glb_Location_Code == "5"): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Else If (!(Glb_Location_Code == "1" || Glb_Location_Code == "4" || Glb_Location_Code == "360")): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Else If (Service_Date.before(current)): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Else If (DropOffTime.before(Start_WS_Hr) || Glb_BookingStatus == "current"): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Else If (PickUpTime.after(End_WS_Hr)): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Else If (!(Service_Date.format("E") == "Sat" || Service_Date.format("E") == "Sun")): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - VerifyResponse(res_MakeServiceBooking, 200, ""): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - verifyResponseStatusCode: Verify response status code successfully

2018-10-03 14:54:03 - [MESSAGE][PASSED] - Verify response status code successfully

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - res_Text = new groovy.json.JsonSlurper().parseText(response.getResponseText()): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - If (!(ExpectedMessage == "")): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Glb_BookingStatus = "current": null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - res_Text = new groovy.json.JsonSlurper().parseText(res_MakeServiceBooking.getResponseText()): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Glb_Booking_ID = BookingID: null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - println(Glb_Booking_ID): null

2018-10-03 14:54:03 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_MakeServiceBooking_JSON - V1' successfully

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - callTestCase: Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_MakeServiceBooking_JSON - V1' successfully

2018-10-03 14:54:03 - [TEST_CASE][PASSED] - Test Cases/TOYOTA/Library_TestCase/Toyota_MakeServiceBooking_JSON - V1: Test Cases/TOYOTA/Library_TestCase/Toyota_MakeServiceBooking_JSON - V1

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - ConvertString_toDate = { java.lang.String Date_Str, java.lang.String format -> ... }: null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - ConvertObjectToDate = { java.lang.Object global -> ... }: null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - DMSOperationCode = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression>: null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - If (Glb_ServiceType == "OSB_SERVICE_TYPE_LOGBOOK"): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - DMSOperationCode = "OSB_SERVICE_TYPE_ADDITIONAL": null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - MakeServiceBooking = com.kms.katalon.core.testobject.ObjectRepository.findTestObject(Toyota/MakeServiceBooking_JSON, [VIN:internal.GlobalVariable.Glb_VIN, REGNumber:internal.GlobalVariable.Glb_REGNumber, Service_Date:internal.GlobalVariable.Glb_ServiceDate, ... ]): Finding Test Object with id 'Object Repository/Toyota/MakeServiceBooking_JSON'

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - MakeServiceBooking.getHttpHeaderProperties().add(new com.kms.katalon.core.testobject.TestObjectProperty(Authorization, com.kms.katalon.core.testobject.ConditionType.EQUALS, (Basic  + internal.GlobalVariable.Glb_Authorization_Token))): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - res_MakeServiceBooking = com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords.sendRequest(MakeServiceBooking): Send request successfully

2018-10-03 14:54:03 - [MESSAGE][PASSED] - Send request successfully

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - TotalDuration = Glb_TotalDuration: null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Service_Date = java.util.Date.parse("yyyy-MM-dd", Glb_ServiceDate): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - current = java.util.Date.parse("yyyy-MM-dd", Glb_Current_Date): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - DropOffTime = ConvertObjectToDate.call(Glb_DropOffTime): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - PickUpTime = ConvertObjectToDate.call(Glb_PickUpTime): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Start_WS_Hr_Obj = "0" + Glb_WorkshopStart + ":00": null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - Start_WS_Hr = ConvertObjectToDate.call(Start_WS_Hr_Obj): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - End_WS_Hr_Obj = Glb_WorkshopEnd + ":00": null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - End_WS_Hr = ConvertObjectToDate.call(End_WS_Hr_Obj): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - duration_hours = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression>: null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - println(Glb_BookingStatus): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - If (!(Glb_Dealer_Code == "765A")): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - verifyResponseStatusCode: Verify response status code successfully

2018-10-03 14:54:03 - [MESSAGE][PASSED] - Verify response status code successfully

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - res_Text = new groovy.json.JsonSlurper().parseText(response.getResponseText()): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - If (!(ExpectedMessage == "")): null

2018-10-03 14:54:03 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_MakeServiceBooking_JSON - V1' successfully

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - If (var_Status_SearchBooking == "true"): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - If (var_Status_GetBookingDetail == "true"): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - If (var_Status_ChangeBooking == "true"): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - If (var_Status_CancelBooking == "true"): Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_CancelBooking_JSON - V1' successfully

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - callTestCase: Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_CancelBooking_JSON - V1' successfully

2018-10-03 14:54:03 - [TEST_CASE][PASSED] - Test Cases/TOYOTA/Library_TestCase/Toyota_CancelBooking_JSON - V1: Test Cases/TOYOTA/Library_TestCase/Toyota_CancelBooking_JSON - V1

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - CancelBooking = com.kms.katalon.core.testobject.ObjectRepository.findTestObject(Toyota/CancelBooking_JSON, [Dealer_Code:internal.GlobalVariable.Glb_Dealer_Code, Location_Code:internal.GlobalVariable.Glb_Location_Code, BookingID:internal.GlobalVariable.Glb_Booking_ID]): Finding Test Object with id 'Object Repository/Toyota/CancelBooking_JSON'

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - CancelBooking.getHttpHeaderProperties().add(new com.kms.katalon.core.testobject.TestObjectProperty(Authorization, com.kms.katalon.core.testobject.ConditionType.EQUALS, (Basic  + internal.GlobalVariable.Glb_Authorization_Token))): null

2018-10-03 14:54:03 - [TEST_STEP][PASSED] - Statement - res_CancelBooking = com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords.sendRequest(CancelBooking): Send request successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Send request successfully

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (!(Glb_Dealer_Code == "765A")): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else If (Glb_Location_Code == "2" || Glb_Location_Code == "3" || Glb_Location_Code == "5"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else If (!(Glb_Location_Code == "1" || Glb_Location_Code == "4" || Glb_Location_Code == "360")): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else If (Glb_Booking_ID == "1901" || Glb_BookingStatus == "cancel" || Glb_Booking_ID == "wrong"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3' successfully

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - verifyResponseStatusCode: Verify response status code successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify response status code successfully

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Glb_BookingStatus = "cancel": null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - println(Glb_BookingStatus): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Glb_StartDate = Glb_ServiceDate: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Glb_EndDate = Glb_ServiceDate: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - callTestCase: Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3' successfully

2018-10-03 14:54:04 - [TEST_CASE][PASSED] - Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3: Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - current_hour = java.util.Date.parse("HH:mm", Glb_Current_Hour): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - current = java.util.Date.parse("yyyy-MM-dd", Glb_Current_Date): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Start_Date_Str = java.util.Date.parse("yyyy-MM-dd", Glb_StartDate): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Start_Date = Start_Date_Str.format("yyyy-MM-dd"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - End_Date_Str = java.util.Date.parse("yyyy-MM-dd", Glb_EndDate): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Start = Glb_WorkshopStart: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - End = Glb_WorkshopEnd: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Interval = Glb_Interval: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Duration = Glb_Duration_Time: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - GetServiceOperation = com.kms.katalon.core.testobject.ObjectRepository.findTestObject(Toyota/GetDropOffTimes_JSON, [Start_Date:internal.GlobalVariable.Glb_StartDate, End_Date:internal.GlobalVariable.Glb_EndDate, ServiceBay_Type:internal.GlobalVariable.Glb_ServiceBay_Type, ... ]): Finding Test Object with id 'Object Repository/Toyota/GetDropOffTimes_JSON'

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - GetServiceOperation.getHttpHeaderProperties().add(new com.kms.katalon.core.testobject.TestObjectProperty(Authorization, com.kms.katalon.core.testobject.ConditionType.EQUALS, (Basic  + internal.GlobalVariable.Glb_Authorization_Token))): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - res_GetServiceOperation = com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords.sendRequest(GetServiceOperation): Send request successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Send request successfully

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (!(Glb_Dealer_Code == "765A")): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else If (Start_Date_Str.after(End_Date_Str)): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else If (Duration <= 0): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else If (!(Glb_ServiceBay_Type == "PERIODIC" || Glb_ServiceBay_Type == "EXPRESS" || Glb_ServiceBay_Type == "REPAIR" || Glb_ServiceBay_Type == "DIAGNOSTIC")): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else If (Glb_Location_Code == "2" || Glb_Location_Code == "3" || Glb_Location_Code == "5"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else If (!(Glb_Location_Code == "1" || Glb_Location_Code == "4" || Glb_Location_Code == "360")): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else If (Start_Date_Str.before(current)): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else If (Duration >= 10): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - VerifyResponse(res_GetServiceOperation, 200, ""): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - verifyResponseStatusCode: Verify response status code successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify response status code successfully

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - res_Text = new groovy.json.JsonSlurper().parseText(response.getResponseText()): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (!(ExpectedMessage == "")): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - duration_days = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression>: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - For ([i = 0, i < duration_days + 1, (i++)]): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (!(Start_Date_Str.format("E") == "Sat" || Start_Date_Str.format("E") == "Sun")): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - verifyElementPropertyValue: Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - IsCurrentDate = "false": null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (Start_Date_Str.equals(current)): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - today = new java.util.Date(): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - realtime_ws = new java.util.Date(): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - realtime_ws.set(["hourOfDay":Start, "minute":0]): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - println(realtime_ws.format("HH:mm")): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - time_close_ws = new java.util.Date(): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - time_close_ws.set(["hourOfDay":End - Duration, "minute":0]): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times = []: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = 0: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - While (!(realtime_ws.after(time_close_ws))): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - If (!(Reserve_Timeslot == "")): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - println(times): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - res_Text = new groovy.json.JsonSlurper().parseText(res_GetServiceOperation.getResponseText()): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - timeslotJSON = 0: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Times.each({ -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - assert timeslotJSON == count: null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - For ([j = 0, j < count, (j++)]): Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - Start_Date = Start_Date_Str.format("yyyy-MM-dd"): null

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - Statement - IsCurrentDate = "false": null

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3' successfully

2018-10-03 14:54:04 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_CancelBooking_JSON - V1' successfully

2018-10-03 14:54:04 - [TEST_STEP][PASSED] - callTestCase: Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_CancelBooking_JSON - V1' successfully

2018-10-03 14:54:04 - [TEST_CASE][PASSED] - Test Cases/TOYOTA/Library_TestCase/Toyota_CancelBooking_JSON - V1: Test Cases/TOYOTA/Library_TestCase/Toyota_CancelBooking_JSON - V1

2018-10-03 14:54:05 - [TEST_STEP][PASSED] - Statement - CancelBooking = com.kms.katalon.core.testobject.ObjectRepository.findTestObject(Toyota/CancelBooking_JSON, [Dealer_Code:internal.GlobalVariable.Glb_Dealer_Code, Location_Code:internal.GlobalVariable.Glb_Location_Code, BookingID:internal.GlobalVariable.Glb_Booking_ID]): Finding Test Object with id 'Object Repository/Toyota/CancelBooking_JSON'

2018-10-03 14:54:05 - [TEST_STEP][PASSED] - Statement - CancelBooking.getHttpHeaderProperties().add(new com.kms.katalon.core.testobject.TestObjectProperty(Authorization, com.kms.katalon.core.testobject.ConditionType.EQUALS, (Basic  + internal.GlobalVariable.Glb_Authorization_Token))): null

2018-10-03 14:54:05 - [TEST_STEP][PASSED] - Statement - res_CancelBooking = com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords.sendRequest(CancelBooking): Send request successfully

2018-10-03 14:54:05 - [MESSAGE][PASSED] - Send request successfully

2018-10-03 14:54:05 - [TEST_STEP][PASSED] - Statement - If (!(Glb_Dealer_Code == "765A")): null

2018-10-03 14:54:05 - [TEST_STEP][PASSED] - verifyResponseStatusCode: Verify response status code successfully

2018-10-03 14:54:05 - [MESSAGE][PASSED] - Verify response status code successfully

2018-10-03 14:54:05 - [TEST_STEP][PASSED] - Statement - res_Text = new groovy.json.JsonSlurper().parseText(response.getResponseText()): null

2018-10-03 14:54:05 - [TEST_STEP][PASSED] - Statement - If (!(ExpectedMessage == "")): null

2018-10-03 14:54:05 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_CancelBooking_JSON - V1' successfully]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <system-out><![CDATA[2018-10-03 14:54:00 - [TEST_SUITE][PASSED] - Sprint_ReserveTimeslot: Test Cases/TOYOTA/Main_Toyota_TestCase - AllSprints]]></system-out>
      <system-err><![CDATA[]]></system-err>
   </testsuite>
</testsuites>
