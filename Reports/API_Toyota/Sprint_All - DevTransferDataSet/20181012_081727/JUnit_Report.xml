<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Sprint_All - DevTransferDataSet" time="8" tests="0" failures="1" errors="0">
   <testsuite name="Sprint_All - DevTransferDataSet" tests="0" failures="1" errors="0" time="8" timestamp="2018-10-12 08:17:28" hostname="vinh.le - TITAN-V-2001.titandms.local" id="Test Suites/API_Toyota/Sprint_All - DevTransferDataSet">
      <properties>
         <property name="deviceName" value=""/>
         <property name="devicePlatform" value=""/>
         <property name="logFolder" value="C:\\Users\\vinh.le\\git\\TitanAPIKatalon\\Reports\\API_Toyota\\Sprint_All - DevTransferDataSet\\20181012_081727"/>
         <property name="logFiles" value="C:\\Users\\vinh.le\\git\\TitanAPIKatalon\\Reports\\API_Toyota\\Sprint_All - DevTransferDataSet\\20181012_081727\\execution0.log"/>
         <property name="attachments" value=""/>
         <property name="hostName" value="vinh.le - TITAN-V-2001.titandms.local"/>
         <property name="hostAddress" value="192.168.3.19"/>
         <property name="os" value="Windows 10 64bit"/>
         <property name="katalonVersion" value="5.7.1.1"/>
      </properties>
      <testcase name="Test Cases/TOYOTA/Main_Toyota_TestCase - AllSprints - Dev" classname="Test Cases/TOYOTA/Main_Toyota_TestCase - AllSprints - Dev" status="FAILED">
         <failure type="FAILED" message="(Stack trace: Assertion failed: 

assert timeslotJSON == count
       |            |  |
       4            |  15
                    false

	at org.codehaus.groovy.runtime.InvokerHelper.assertFailed(InvokerHelper.java:402)
	at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.assertFailed(ScriptBytecodeAdapter.java:650)
	at Script1537952975430.run(Script1537952975430.groovy:193)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:99)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:60)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:54)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:45)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:53)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)
	at groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1469)
	at org.codehaus.groovy.runtime.callsite.StaticMetaClassSite.call(StaticMetaClassSite.java:53)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
	at Script1538995852818.run(Script1538995852818.groovy:71)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:129)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:112)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:81)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:142)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
	at TempTestSuite1539307047209.run(TempTestSuite1539307047209.groovy:36)
	at groovy.lang.GroovyShell.runScriptOrMainOrTestOrRunnable(GroovyShell.java:263)
	at groovy.lang.GroovyShell.run(GroovyShell.java:518)
	at groovy.lang.GroovyShell.run(GroovyShell.java:507)
	at groovy.ui.GroovyMain.processOnce(GroovyMain.java:653)
	at groovy.ui.GroovyMain.run(GroovyMain.java:384)
	at groovy.ui.GroovyMain.process(GroovyMain.java:370)
	at groovy.ui.GroovyMain.processArgs(GroovyMain.java:129)
	at groovy.ui.GroovyMain.main(GroovyMain.java:109)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.tools.GroovyStarter.rootLoader(GroovyStarter.java:109)
	at org.codehaus.groovy.tools.GroovyStarter.main(GroovyStarter.java:131)
)"/>
         <system-out><![CDATA[2018-10-12 08:17:28 - [TEST_CASE][FAILED] - Test Cases/TOYOTA/Main_Toyota_TestCase - AllSprints - Dev: Test Cases/TOYOTA/Main_Toyota_TestCase - AllSprints - Dev FAILED because (of) (Stack trace: Assertion failed: 

assert timeslotJSON == count
       |            |  |
       4            |  15
                    false

	at org.codehaus.groovy.runtime.InvokerHelper.assertFailed(InvokerHelper.java:402)
	at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.assertFailed(ScriptBytecodeAdapter.java:650)
	at Script1537952975430.run(Script1537952975430.groovy:193)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:99)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:60)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:54)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:45)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:53)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)
	at groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1469)
	at org.codehaus.groovy.runtime.callsite.StaticMetaClassSite.call(StaticMetaClassSite.java:53)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
	at Script1538995852818.run(Script1538995852818.groovy:71)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:129)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:112)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:81)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:142)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
	at TempTestSuite1539307047209.run(TempTestSuite1539307047209.groovy:36)
	at groovy.lang.GroovyShell.runScriptOrMainOrTestOrRunnable(GroovyShell.java:263)
	at groovy.lang.GroovyShell.run(GroovyShell.java:518)
	at groovy.lang.GroovyShell.run(GroovyShell.java:507)
	at groovy.ui.GroovyMain.processOnce(GroovyMain.java:653)
	at groovy.ui.GroovyMain.run(GroovyMain.java:384)
	at groovy.ui.GroovyMain.process(GroovyMain.java:370)
	at groovy.ui.GroovyMain.processArgs(GroovyMain.java:129)
	at groovy.ui.GroovyMain.main(GroovyMain.java:109)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.tools.GroovyStarter.rootLoader(GroovyStarter.java:109)
	at org.codehaus.groovy.tools.GroovyStarter.main(GroovyStarter.java:131)
)

2018-10-12 08:17:28 - [TEST_STEP][PASSED] - Statement - Glb_Status_GetOperationCode = "failed": null

2018-10-12 08:17:28 - [TEST_STEP][PASSED] - Statement - Glb_Status_GetDropOffTime = "failed": null

2018-10-12 08:17:28 - [TEST_STEP][PASSED] - Statement - Glb_Status_GetPickupTime = "failed": null

2018-10-12 08:17:28 - [TEST_STEP][PASSED] - Statement - Glb_Status_ReserveTimeslot = "failed": null

2018-10-12 08:17:28 - [TEST_STEP][PASSED] - Statement - Glb_Status_GetTransportOption = "failed": null

2018-10-12 08:17:28 - [TEST_STEP][PASSED] - Statement - Glb_Status_MakeServiceBooking = "failed": null

2018-10-12 08:17:28 - [TEST_STEP][PASSED] - Statement - Glb_Status_SearchBooking = "failed": null

2018-10-12 08:17:28 - [TEST_STEP][PASSED] - Statement - Glb_Status_GetBookingDetail = "failed": null

2018-10-12 08:17:28 - [TEST_STEP][PASSED] - Statement - Glb_Status_ChangeBooking = "failed": null

2018-10-12 08:17:28 - [TEST_STEP][PASSED] - Statement - Glb_Status_CancelBooking = "failed": null

2018-10-12 08:17:28 - [TEST_STEP][PASSED] - Statement - Glb_Reserve_Token = "no": null

2018-10-12 08:17:28 - [TEST_STEP][PASSED] - Statement - Glb_BookingStatus = "not yet": null

2018-10-12 08:17:28 - [TEST_STEP][PASSED] - Statement - Glb_Booking_ID = "wrong": null

2018-10-12 08:17:28 - [TEST_STEP][PASSED] - callTestCase: Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Setup_Method_And_Variables - V1 - Dev' successfully

2018-10-12 08:17:28 - [TEST_CASE][PASSED] - Test Cases/TOYOTA/Library_TestCase/Setup_Method_And_Variables - V1 - Dev: Test Cases/TOYOTA/Library_TestCase/Setup_Method_And_Variables - V1 - Dev

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_Interval == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_WorkshopStart == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_WorkshopEnd == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_Dealer_Code == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_Location_Code == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_VIN == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_REGNumber == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_FirstName == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_LastName == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_TotalPrice == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_TotalDuration == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_StartDropDate == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_EndDropDate == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_StartSearchDate == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_EndSearchDate == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_Duration == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_ServiceDate == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_StartDropDate == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_EndDropDate == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_StartSearchDate == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_EndSearchDate == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_BookingId == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_ServiceType == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_DropOffTime == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_PickUpTime == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_ServiceBay_Type == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (!(Setup_AddJobLine == "")): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - SetDate = { java.util.Date current_time, int number_month, int number_day, int number_hour, java.lang.String format_date -> ... }: null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - RandomNumber = { int number -> ... }: null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - today = new java.util.Date(): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - current_date = today.format("YYYY-MM-dd"): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - Glb_Current_Date = current_date: null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - Glb_Current_Hour = SetDate.call(today, 0, 0, 4, "HH:mm"): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (Glb_ServiceDate.toString().toLowerCase() == "cr"): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (Glb_StartDate.toString().toLowerCase() == "cr"): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (Glb_EndDate.toString().toLowerCase() == "cr"): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (Glb_StartSearchDate.toString().toLowerCase() == "cr"): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (Glb_EndSearchDate.toString().toLowerCase() == "cr"): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - Glb_ContactId = "1901" + RandomNumber.call(999999): null

2018-10-12 08:17:29 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Setup_Method_And_Variables - V1 - Dev' successfully

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (var_Status_OpCode == "true"): Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetServiceOperation_JSON - V2' successfully

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - callTestCase: Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetServiceOperation_JSON - V2' successfully

2018-10-12 08:17:29 - [TEST_CASE][PASSED] - Test Cases/TOYOTA/Library_TestCase/Toyota_GetServiceOperation_JSON - V2: Test Cases/TOYOTA/Library_TestCase/Toyota_GetServiceOperation_JSON - V2

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - RoundNumber = { java.lang.Float floatnumber -> ... }: null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - ServiceType = Glb_ServiceType: null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - Filepath = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression>: null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - If (Glb_ServiceType == "OSB_SERVICE_TYPE_LOGBOOK"): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - println(Glb_Dealer_Code): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - println(Glb_Location_Code): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - println(Glb_VIN): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - println(Glb_ServiceType): null

2018-10-12 08:17:29 - [TEST_STEP][PASSED] - Statement - GetServiceOperation = com.kms.katalon.core.testobject.ObjectRepository.findTestObject(Toyota/GetServiceOperations_JSON, [Dealer_Code:internal.GlobalVariable.Glb_Dealer_Code, Location_Code:internal.GlobalVariable.Glb_Location_Code, VIN:internal.GlobalVariable.Glb_VIN, ... ]): Finding Test Object with id 'Object Repository/Toyota/GetServiceOperations_JSON'

2018-10-12 08:17:30 - [TEST_STEP][PASSED] - Statement - GetServiceOperation.getHttpHeaderProperties().add(new com.kms.katalon.core.testobject.TestObjectProperty(Authorization, com.kms.katalon.core.testobject.ConditionType.EQUALS, (Basic  + internal.GlobalVariable.Glb_Authorization_Token))): null

2018-10-12 08:17:30 - [TEST_STEP][PASSED] - Statement - res_GetServiceOperation = com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords.sendRequest(GetServiceOperation): Send request successfully

2018-10-12 08:17:36 - [MESSAGE][PASSED] - Send request successfully

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(Glb_Dealer_Code == "765A")): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Else If (!(Glb_ServiceType == "OSB_SERVICE_TYPE_LOGBOOK" || Glb_ServiceType == "OSB_SERVICE_TYPE_ADDITIONAL")): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Else If (Glb_Location_Code == "2" || Glb_Location_Code == "3" || Glb_Location_Code == "5"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Else If (!(Glb_Location_Code == "1" || Glb_Location_Code == "4" || Glb_Location_Code == "360")): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Else If (Glb_VIN.toString().toLowerCase() == "vininvalid"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - VerifyResponse(res_GetServiceOperation, 200, ""): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (StatusCode == 0): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Else: Verify response status code successfully

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - verifyResponseStatusCode: Verify response status code successfully

2018-10-12 08:17:36 - [MESSAGE][PASSED] - Verify response status code successfully

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - res_Text = new groovy.json.JsonSlurper().parseText(response.getResponseText()): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(ExpectedMessage == "")): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - res_Text = new groovy.json.JsonSlurper().parseText(res_GetServiceOperation.getResponseText()): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - OpCodeJSON = 0: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - res_Text.each({ -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV = 0: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - CSVReader = new java.io.File(Filepath): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - csv_content = CSVReader.getText("utf-8"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - CSVData = com.xlson.groovycsv.CsvParser.parseCsv([separator:,, readFirstLine:false], csv_content): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - For (def line : CSVData): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Name == Name: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert DMSOperationalCode == DMSOperationalCode: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _duration = Duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_duration.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(Duration) == _duration: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - _price = DealerPrice: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(_price.contains("."))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert RoundNumber.call(DealerPrice) == _price: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceType == ServiceType: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert ServiceCode == null: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert EMDuration == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert POAFlag == "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert Price == "0.0": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count_CSV += 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - assert OpCodeJSON == count_CSV: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Glb_Status_GetOperationCode = "passed": null

2018-10-12 08:17:36 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetServiceOperation_JSON - V2' successfully

2018-10-12 08:17:36 - [TEST_STEP][FAILED] - Statement - If (var_Status_GetOffTime == "true"): Unable to call Test Case with id 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3' (Root cause: Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3' failed)

2018-10-12 08:17:36 - [TEST_STEP][FAILED] - callTestCase: Unable to call Test Case with id 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3' (Root cause: Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3' failed)

2018-10-12 08:17:36 - [TEST_CASE][FAILED] - Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3: Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3 FAILED because (of) (Stack trace: Assertion failed: 

assert timeslotJSON == count
       |            |  |
       4            |  15
                    false

	at org.codehaus.groovy.runtime.InvokerHelper.assertFailed(InvokerHelper.java:402)
	at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.assertFailed(ScriptBytecodeAdapter.java:650)
	at Script1537952975430.run(Script1537952975430.groovy:193)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:99)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:60)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:54)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:45)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:53)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)
	at groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1469)
	at org.codehaus.groovy.runtime.callsite.StaticMetaClassSite.call(StaticMetaClassSite.java:53)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
	at Script1538995852818.run(Script1538995852818.groovy:71)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:129)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:112)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:81)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:142)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
	at TempTestSuite1539307047209.run(TempTestSuite1539307047209.groovy:36)
	at groovy.lang.GroovyShell.runScriptOrMainOrTestOrRunnable(GroovyShell.java:263)
	at groovy.lang.GroovyShell.run(GroovyShell.java:518)
	at groovy.lang.GroovyShell.run(GroovyShell.java:507)
	at groovy.ui.GroovyMain.processOnce(GroovyMain.java:653)
	at groovy.ui.GroovyMain.run(GroovyMain.java:384)
	at groovy.ui.GroovyMain.process(GroovyMain.java:370)
	at groovy.ui.GroovyMain.processArgs(GroovyMain.java:129)
	at groovy.ui.GroovyMain.main(GroovyMain.java:109)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.tools.GroovyStarter.rootLoader(GroovyStarter.java:109)
	at org.codehaus.groovy.tools.GroovyStarter.main(GroovyStarter.java:131)
)

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - ConvertObjectToDate = { java.lang.Object global -> ... }: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - current_hour = ConvertObjectToDate.call(Glb_Current_Hour): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Service_Date = java.util.Date.parse("yyyy-MM-dd", Glb_ServiceDate): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - current = java.util.Date.parse("yyyy-MM-dd", Glb_Current_Date): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Start_Date_Str = java.util.Date.parse("yyyy-MM-dd", Glb_StartDate): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Start_Date = Start_Date_Str.format("yyyy-MM-dd"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - End_Date_Str = java.util.Date.parse("yyyy-MM-dd", Glb_EndDate): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Start = Glb_WorkshopStart: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - End = Glb_WorkshopEnd: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Interval = Glb_Interval: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Duration = Glb_Duration_Time: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - GetServiceOperation = com.kms.katalon.core.testobject.ObjectRepository.findTestObject(Toyota/GetDropOffTimes_JSON, [Start_Date:internal.GlobalVariable.Glb_StartDate, End_Date:internal.GlobalVariable.Glb_EndDate, ServiceBay_Type:internal.GlobalVariable.Glb_ServiceBay_Type, ... ]): Finding Test Object with id 'Object Repository/Toyota/GetDropOffTimes_JSON'

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - GetServiceOperation.getHttpHeaderProperties().add(new com.kms.katalon.core.testobject.TestObjectProperty(Authorization, com.kms.katalon.core.testobject.ConditionType.EQUALS, (Basic  + internal.GlobalVariable.Glb_Authorization_Token))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - res_GetServiceOperation = com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords.sendRequest(GetServiceOperation): Send request successfully

2018-10-12 08:17:36 - [MESSAGE][PASSED] - Send request successfully

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(Glb_Dealer_Code == "765A")): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Else If (Start_Date_Str.after(End_Date_Str)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Else If (Duration <= 0): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Else If (!(Glb_ServiceBay_Type == "PERIODIC" || Glb_ServiceBay_Type == "EXPRESS" || Glb_ServiceBay_Type == "REPAIR" || Glb_ServiceBay_Type == "DIAGNOSTIC")): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Else If (Glb_Location_Code == "2" || Glb_Location_Code == "3" || Glb_Location_Code == "5"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Else If (!(Glb_Location_Code == "1" || Glb_Location_Code == "4" || Glb_Location_Code == "360")): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Else If (Start_Date_Str.before(current)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Else If (Duration >= 10): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - VerifyResponse(res_GetServiceOperation, 200, ""): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - verifyResponseStatusCode: Verify response status code successfully

2018-10-12 08:17:36 - [MESSAGE][PASSED] - Verify response status code successfully

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - res_Text = new groovy.json.JsonSlurper().parseText(response.getResponseText()): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(ExpectedMessage == "")): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - duration_days = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression>: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - For ([i = 0, i < duration_days + 1, (i++)]): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (!(Start_Date_Str.format("E") == "Sat" || Start_Date_Str.format("E") == "Sun")): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - verifyElementPropertyValue: Verify element property value successfully

2018-10-12 08:17:36 - [MESSAGE][PASSED] - Verify element property value successfully

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - IsCurrentDate = "false": null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (Start_Date_Str.equals(current)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - today = new java.util.Date(): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - realtime_ws = new java.util.Date(): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - realtime_ws.set(["hourOfDay":Start, "minute":0]): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - println(realtime_ws.format("HH:mm")): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - time_close_ws = new java.util.Date(): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - time_close_ws.set(["hourOfDay":End - Duration, "minute":0]): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - times = []: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count = 0: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - While (!(realtime_ws.after(time_close_ws))): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:36 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (IsCurrentDate == "true"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (realtime_ws.after(today)): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - times[count] = realtime_ws.format("HH:mm"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - count = count + 1: null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - use(groovy.time.TimeCategory, { -> ... }): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (!(Reserve_Timeslot == "") && Service_Date == Start_Date_Str): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - println(times): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - res_Text = new groovy.json.JsonSlurper().parseText(res_GetServiceOperation.getResponseText()): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - timeslotJSON = 0: null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - println(Times): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - Times.each({ -> ... }): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - assert timeslotJSON == count: null

2018-10-12 08:17:37 - [MESSAGE][FAILED] - Unable to call Test Case with id 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3' (Root cause: Call Test Case 'Test Cases/TOYOTA/Library_TestCase/Toyota_GetDropOffTimes_JSON - V3' failed)

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Start tear down : HandleFailing: Method 'HandleFailing' complete successfully

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (var_Status_OpCode == "true" && var_Status_GetOffTime == "true" && var_Status_PickupTime == "true" && var_Status_ReservedTimeslot == "true" && var_Status_GetTransport == "true" && var_Status_MakeBooking == "true" && var_Status_SearchBooking == "true" && var_Status_GetBookingDetail == "true" && var_Status_ChangeBooking == "true" && var_Status_CancelBooking == "true"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (!(Glb_Status_GetOperationCode == "passed")): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - Else: null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - println("Test Case GetOperationCode: PASSED"): null

2018-10-12 08:17:37 - [TEST_STEP][PASSED] - Statement - If (Glb_Status_GetDropOffTime == "passed"): null

2018-10-12 08:17:37 - [MESSAGE][PASSED] - Method 'HandleFailing' complete successfully]]></system-out>
         <system-err><![CDATA[2018-10-12 08:17:28 - [TEST_CASE][FAILED] - Test Cases/TOYOTA/Main_Toyota_TestCase - AllSprints - Dev: Test Cases/TOYOTA/Main_Toyota_TestCase - AllSprints - Dev FAILED because (of) (Stack trace: Assertion failed: 

assert timeslotJSON == count
       |            |  |
       4            |  15
                    false

	at org.codehaus.groovy.runtime.InvokerHelper.assertFailed(InvokerHelper.java:402)
	at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.assertFailed(ScriptBytecodeAdapter.java:650)
	at Script1537952975430.run(Script1537952975430.groovy:193)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:99)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:60)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:54)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:45)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:53)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)
	at groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1469)
	at org.codehaus.groovy.runtime.callsite.StaticMetaClassSite.call(StaticMetaClassSite.java:53)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
	at Script1538995852818.run(Script1538995852818.groovy:71)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:129)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:112)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:81)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:142)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
	at TempTestSuite1539307047209.run(TempTestSuite1539307047209.groovy:36)
	at groovy.lang.GroovyShell.runScriptOrMainOrTestOrRunnable(GroovyShell.java:263)
	at groovy.lang.GroovyShell.run(GroovyShell.java:518)
	at groovy.lang.GroovyShell.run(GroovyShell.java:507)
	at groovy.ui.GroovyMain.processOnce(GroovyMain.java:653)
	at groovy.ui.GroovyMain.run(GroovyMain.java:384)
	at groovy.ui.GroovyMain.process(GroovyMain.java:370)
	at groovy.ui.GroovyMain.processArgs(GroovyMain.java:129)
	at groovy.ui.GroovyMain.main(GroovyMain.java:109)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.tools.GroovyStarter.rootLoader(GroovyStarter.java:109)
	at org.codehaus.groovy.tools.GroovyStarter.main(GroovyStarter.java:131)
)]]></system-err>
      </testcase>
      <system-out><![CDATA[2018-10-12 08:17:28 - [TEST_SUITE][FAILED] - Sprint_All - DevTransferDataSet: Test Cases/TOYOTA/Main_Toyota_TestCase - AllSprints - Dev FAILED because (of) (Stack trace: Assertion failed: 

assert timeslotJSON == count
       |            |  |
       4            |  15
                    false

	at org.codehaus.groovy.runtime.InvokerHelper.assertFailed(InvokerHelper.java:402)
	at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.assertFailed(ScriptBytecodeAdapter.java:650)
	at Script1537952975430.run(Script1537952975430.groovy:193)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:99)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:60)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:54)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:45)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:53)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)
	at groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1469)
	at org.codehaus.groovy.runtime.callsite.StaticMetaClassSite.call(StaticMetaClassSite.java:53)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
	at Script1538995852818.run(Script1538995852818.groovy:71)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:129)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:112)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:81)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:142)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
	at TempTestSuite1539307047209.run(TempTestSuite1539307047209.groovy:36)
	at groovy.lang.GroovyShell.runScriptOrMainOrTestOrRunnable(GroovyShell.java:263)
	at groovy.lang.GroovyShell.run(GroovyShell.java:518)
	at groovy.lang.GroovyShell.run(GroovyShell.java:507)
	at groovy.ui.GroovyMain.processOnce(GroovyMain.java:653)
	at groovy.ui.GroovyMain.run(GroovyMain.java:384)
	at groovy.ui.GroovyMain.process(GroovyMain.java:370)
	at groovy.ui.GroovyMain.processArgs(GroovyMain.java:129)
	at groovy.ui.GroovyMain.main(GroovyMain.java:109)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.tools.GroovyStarter.rootLoader(GroovyStarter.java:109)
	at org.codehaus.groovy.tools.GroovyStarter.main(GroovyStarter.java:131)
)]]></system-out>
      <system-err><![CDATA[2018-10-12 08:17:28 - [TEST_SUITE][FAILED] - Sprint_All - DevTransferDataSet: Test Cases/TOYOTA/Main_Toyota_TestCase - AllSprints - Dev FAILED because (of) (Stack trace: Assertion failed: 

assert timeslotJSON == count
       |            |  |
       4            |  15
                    false

	at org.codehaus.groovy.runtime.InvokerHelper.assertFailed(InvokerHelper.java:402)
	at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.assertFailed(ScriptBytecodeAdapter.java:650)
	at Script1537952975430.run(Script1537952975430.groovy:193)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:99)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:60)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:54)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:45)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:53)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)
	at groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1469)
	at org.codehaus.groovy.runtime.callsite.StaticMetaClassSite.call(StaticMetaClassSite.java:53)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
	at Script1538995852818.run(Script1538995852818.groovy:71)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:129)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:112)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:81)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:142)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
	at TempTestSuite1539307047209.run(TempTestSuite1539307047209.groovy:36)
	at groovy.lang.GroovyShell.runScriptOrMainOrTestOrRunnable(GroovyShell.java:263)
	at groovy.lang.GroovyShell.run(GroovyShell.java:518)
	at groovy.lang.GroovyShell.run(GroovyShell.java:507)
	at groovy.ui.GroovyMain.processOnce(GroovyMain.java:653)
	at groovy.ui.GroovyMain.run(GroovyMain.java:384)
	at groovy.ui.GroovyMain.process(GroovyMain.java:370)
	at groovy.ui.GroovyMain.processArgs(GroovyMain.java:129)
	at groovy.ui.GroovyMain.main(GroovyMain.java:109)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.groovy.tools.GroovyStarter.rootLoader(GroovyStarter.java:109)
	at org.codehaus.groovy.tools.GroovyStarter.main(GroovyStarter.java:131)
)]]></system-err>
   </testsuite>
</testsuites>
